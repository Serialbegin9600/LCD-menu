/*       拳击训练器
开机后进入初始化界面，然后进入主菜单。主菜单中三个键分别进入训练、分数显示、难度设置。
每次训练包括8个组合，每个组合从types中随机抽取，包含三个动作。每个动作进行时，相应灯亮起直至对应靶（按键）被击中，返回所用时间，
若在给定时间内未击中，相应动作未击中次数加一；一直未击中，进入下一组合。八个组合结束后，自动进入打分初始界面，之后进入分数显示界面1
在分数显示界面中可以左右翻页，中键退出。
设置界面左键减小，右键增大，中键退出，难度分三个等级，反映在时间间隔上*/
#include <LiquidCrystal.h>
LiquidCrystal lcd(5,6,7,8,9,10);
bool m[]={true,true,true};    //存储三个按键端口之前电平
int buttons[]={11,12,13};     //三个按键
int leds[]={2,3,4};          //三个LED指示灯
int state=0;                 //当前状态，主菜单为0，训练状态为1，查看成绩状态第一页为2，第二页为3，设置状态为4
int level=1;                 //难度等级，从1到3
int total_times[]={0,0,0};     //分别记录三个靶亮起次数
int miss_times[]={0,0,0};     //分别记录三个靶超时未击中次数
int types[3][3]={
  {1,1,1},
  {1,1,0},
  {1,0,2}
};                        //三个组合，每组三个动作，调用时随机决定一个组合，逐个调用动作



void initial()                //初始化函数，打印启动界面，初始数据
{
  Serial.println("initial");
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Training partner");
  lcd.setCursor(0,1);
  lcd.print("for boxing");
  delay(1000);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("    Welcome    ");
  lcd.setCursor(0,1);
  for(int i=0;i<16;i++)
  {
    lcd.print(">");
    delay(200);
  }
}


void menu()          //主菜单，1为训练，2为看分，3为设置难度
{
  Serial.println("menu");
  state=0;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("1.Train 2.Score");
  lcd.setCursor(0,1);
  lcd.print("3.Set");  
}



void training_initial()          //训练状态初始，打印开始界面
{
  Serial.println("Training initial");
  for(int i=0;i<3;i++)         //清空记录
  {
    total_times[i]=0;
    miss_times[i]=0;
  }
  state=1;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Training in");
  lcd.setCursor(0,1);
  lcd.print("level ");
  lcd.print(level);
  delay(2000);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("     Ready?");
  lcd.setCursor(0,1);
  delay(1000);
  lcd.print("     GO !");
  delay(1000);
  flash();
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Training...");     //进入训练进行中界面
  lcd.setCursor(0,1);
  
}
void flash()                      //LED闪烁，用于提示训练的开始和结束
{
  Serial.println("flash");
  for(int i=0;i<3;i++)
  {
    for(int j=0;j<3;j++)
    {
      digitalWrite(leds[j],HIGH);
    }
    delay(300);
    for(int j=0;j<3;j++)
    {
      digitalWrite(leds[j],LOW);
    }
    delay(300);
  }
}
int check_hit(int n)           //亮灯，每10毫秒检测一次是否击中，若击中则返回时间并灭灯，1秒后自动结束
{
  Serial.println("check hit");
  int hit_time=0;
  digitalWrite(leds[n],HIGH);
  Serial.println("HIT !!!");
  for(int i=0;i<200;i++)
  {
    hit_time+=10;
    if(digitalRead(buttons[n])==LOW)
    {
      break;
    }
    delay(10);
  }
  digitalWrite(leds[n],LOW);
  return hit_time;
}
void training()                //训练过程主函数，调用初始化函数，生成随机动作并检测其完成，结束后进入打分界面
{
  Serial.println("training");
  state=1;
  training_initial();
  int type=0;                      //哪个靶亮起
  int hit_time=0;
  for(int i=0;i<8;i++)     //8个动作
  {
    type=random(0,3);               //随机选定一个组合
    Serial.print("type=");
    Serial.println(type);
    for(int j=0;j<3;j++)                  //逐个执行该组合中的动作
    {
      Serial.print("action=");
      Serial.println(types[type][j]);
      hit_time=check_hit(types[type][j]);
      Serial.print("time");
      Serial.println(hit_time);
      if(hit_time==2000)                     //没有检测到击中，退出此组合
      {
        break;
      }
      else if(hit_time>(1500-300*level))
      {
        miss_times[types[type][j]]+=1;    //此动作未在额定时间内击中次数加一
        Serial.println("MISSED  !!!");
      }
      total_times[types[type][j]]+=1;    //此动作总数加一
      delay(500-100*level);              //组合内动作间间隔
    }
    delay(2000-500*level);              //组间间隔
    lcd.print(">>");                      //打印进度条
  }
  flash();
  show_score();
}







void show_score()                       //显示分数初始界面，完成后自动进入显示界面1
{
  Serial.println("show score");
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("calculating...");
  lcd.setCursor(0,1);
  for(int i=0;i<16;i++)
  {
    lcd.print(">");
    delay(200);
  }
  score1();
}
void score1()                 //显示界面1，右键翻页，中键退出
{
  Serial.println("score1");
  state=2;
  Serial.print("miss hits");
  Serial.println(miss_times[0]+miss_times[1]+miss_times[2]);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("overtime hits");
  lcd.setCursor(0,1);
  lcd.print("total:");
  lcd.print(miss_times[0]+miss_times[1]+miss_times[2]);
  lcd.print("in");
  lcd.print(total_times[0]+total_times[1]+total_times[2]);
}
void score2()            //显示界面2，左键翻页，中键退出
{
  Serial.println("score2");
  state=3;
  Serial.print("swing");
  Serial.println(miss_times[0]+miss_times[2]);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("punch:");
  lcd.print(miss_times[1]);
  lcd.print("in");
  lcd.print(total_times[1]);
  lcd.setCursor(0,1);
  lcd.print("swing:");
  lcd.print(miss_times[0]+miss_times[2]);
  lcd.print("in");
  lcd.print(total_times[0]+total_times[2]);
}



void set()        //设置界面，1、3键调节难度值，2退出界面
{
  Serial.println("set");
  state=4;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("difficulty level");
  lcd.setCursor(0,1);
  lcd.print(level);
}
void change_level(int n)      //改变难度值，n为1难度下降，n为3上升
{
  Serial.print("change level");
  Serial.println(n);
  if(level!=1&&n==1)
  {
    level--;
  }
  else if(level!=3&&n==3)
  {
    level++;
  }
  Serial.print("level");
  Serial.println(level);
  set();
}



int read_button()           //遍历三个按键，返回被按下的按键。只能识别一个按键！
{
  int num=0;
  for(int i=0;i<3;i++)
  {
    
    if(digitalRead(buttons[i])==false&&m[i]==true)
    {
      num=i+1;
    }
    m[i]=digitalRead(buttons[i]);
  }
  return num;           //若无键被按下，返回0，其余返回按键号
}








void setup() {
  for(int i=2;i<5;i++)
  {
    pinMode(i,OUTPUT);
  }
  for(int i=11;i<14;i++)
  {
    pinMode(i,INPUT_PULLUP);
  }
  Serial.begin(9600);
  lcd.begin(16,2);
  randomSeed(analogRead(5));
  initial();
  menu();

}

void loop() {
  /*delay(5000);               //lcd效果调试程序
  training_initial();
  show_score();
  score1();
  delay(5000);
  score2();
  delay(5000);
  set();
  change_level(3);
  delay(5000);
  menu();
  delay(5000);*/
  int pressed=read_button();
  if(pressed==1)              //左键，若在菜单进入训练，显示界面一不动，界面2翻到界面1，设置难度下降（传递1）
  {
    if(state==0)
    {
      training();
    }
    else if(state==3)
    {
      score1();
    }
    else if(state==4)
    {
      change_level(1);
    }
  }


  else if(pressed==2)              //中键，若在菜单进入显示初始化，显示界面退到菜单，设置难度退回菜单
  {
    if(state==0)
    {
      score1();
    }
    else
    {
      menu();
    }

  }


  else if(pressed==3)              //右键，若在菜单进入设置，显示界面一翻到2，界面2不动，设置难度上升（传递3）
  {
    if(state==0)
    {
      set();
    }
    else if(state==2)
    {
      score2();
    }
    else if(state==4)
    {
      change_level(3);
    }
  }
  delay(10);
}
